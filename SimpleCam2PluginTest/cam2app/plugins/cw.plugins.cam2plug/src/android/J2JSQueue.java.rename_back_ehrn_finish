/****************************************************************************/
/* Copyright 2017 Maxim Zhukov                                              */
/*                                                                          */
/* Licensed under the Apache License, Version 2.0 (the "License");          */
/* you may not use this file except in compliance with the License.         */
/* You may obtain a copy of the License at                                  */
/*                                                                          */
/*     http://www.apache.org/licenses/LICENSE-2.0                           */
/*                                                                          */
/* Unless required by applicable law or agreed to in writing, software      */
/* distributed under the License is distributed on an "AS IS" BASIS,        */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
/* See the License for the specific language governing permissions and      */
/* limitations under the License.                                           */
/****************************************************************************/
package cw.plugins.cam2plug;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.PluginResult;
import org.apache.cordova.LOG;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.Exception;
import java.lang.RuntimeException;
import java.lang.NullPointerException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;








public class J2JSQueue {

 private final String gTG = "Cam2Plug-";
 private final String cTG = "(J2JSQueue): ";
 private CallbackContext commsCallbackContext = null;
 private PluginResult[] msgQueue;

 public J2JSQueue(CallbackContext callbackContextToSave) {
   commsCallbackContext = callbackContextToSave;
 }

  private void sendToJs(JSONObject msg) {
   String lTG = "[sendToJs] ";
    if (commsCallbackContext == null) {LOG.d(gTG, cTG+lTG+"Need to notify js about something, but can't because commsCallbackContext is null (i.e. js hasn't yet called us to establish comms link....");}
    else if (commsCallbackContext.isFinished()) {LOG.d(gTG, cTG+lTG+"Need to notify js about something, but can't because commsCallbackContext.isFinished() returns true (i.e. it has already been used at least once and PluginResult.KeepCallback wasn't set to true at the moment, so commsCallbackContext burned after one use)....");}
    else {
      LOG.d(gTG, cTG+lTG+"Notifying js ....");
      PluginResult dataResult = new PluginResult(PluginResult.Status.OK, msg);
      dataResult.setKeepCallback(true);
      commsCallbackContext.sendPluginResult(dataResult);
      LOG.d(gTG, cTG+lTG+"Js notification sent....");
    }
 }

 public int sendJSONObject(JSONObject msg) {
   String lTG = "[sendJSONObject] ";
   LOG.d(gTG, cTG+lTG+"Notifying js....");
    return sendToJs(msg);
   LOG.d(gTG, cTG+lTG+"Notification sent....");
 }


 public int sendBool(String propName,boolean propValue) {
   String lTG = "[sendBool_"+propName+"] ";
   LOG.d(gTG, cTG+lTG+"Notifying js about "+propName+"....");
   try {
     return sendToJs(new JSONObject("{\""+propName+"\":" + String.valueOf(propValue) + "}"));
   }
   catch(JSONException e) { LOG.d(gTG, cTG+lTG+String.format("Exception! Caught %s! (%s) Not fatal, re-throwing it as an RuntimeException and moving on.",e.toString().substring(0,e.toString().indexOf(':')),e.getMessage())); throw new RuntimeException(e);}
   LOG.d(gTG, cTG+lTG+"Notification sent....");
 }


 public int sendString(String propName,String propValue) {
   String lTG = "[sendString_"+propName+"] ";
   LOG.d(gTG, cTG+lTG+"Notifying js about "+propName+"....");
   try {
     return sendToJs(new JSONObject("{\""+propName+"\": \"" + String.valueOf(propValue) + "\"}"));
   }
   catch(JSONException e) { LOG.d(gTG, cTG+lTG+String.format("Exception! Caught %s! (%s) Not fatal, re-throwing it as an RuntimeException and moving on.",e.toString().substring(0,e.toString().indexOf(':')),e.getMessage())); throw new RuntimeException(e);}
   LOG.d(gTG, cTG+lTG+"Notification sent....");
 }

 public int msgsBeforeThis(int msg_idx) {
  return ....
 }
}
